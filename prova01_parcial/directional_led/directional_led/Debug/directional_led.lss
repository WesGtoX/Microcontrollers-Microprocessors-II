
directional_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000210  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000777  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000698  00000000  00000000  00000ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031d  00000000  00000000  0000114f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000146c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042a  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cf  00000000  00000000  000018ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000019b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  9e:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_11>:
#define LED_08	(7)
#define LED_09	(0)

int led_status = 1, value = 0, direction = 0, led_nine = 1;

ISR(TIMER1_COMPA_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
	if (led_nine == 1) {					// verifica o estado do LED
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	19 f4       	brne	.+6      	; 0xca <__vector_11+0x24>
		PORTC = PORTC | (1<<LED_09);		// seta para o status do LED para aceso
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	88 b9       	out	0x08, r24	; 8
	}
	
	if (led_nine == 0) {					// verificar o estado do LED
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d2:	89 2b       	or	r24, r25
  d4:	19 f4       	brne	.+6      	; 0xdc <__vector_11+0x36>
		PORTC = PORTC & ~(1<<LED_09);		// seta para o status do LED para apagado
  d6:	88 b1       	in	r24, 0x08	; 8
  d8:	8e 7f       	andi	r24, 0xFE	; 254
  da:	88 b9       	out	0x08, r24	; 8
	}
	
	led_nine = !led_nine;			// seta valor do LED para seu contrario
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e8:	23 2b       	or	r18, r19
  ea:	11 f0       	breq	.+4      	; 0xf0 <__vector_11+0x4a>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	3f 91       	pop	r19
  fe:	2f 91       	pop	r18
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <main>:


int main(void) {
	DDRB |= (0xFF);					// set output to all PORTB
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	84 b9       	out	0x04, r24	; 4
	DDRC |= (0x01);					// set output to all PORTC
 110:	87 b1       	in	r24, 0x07	; 7
 112:	81 60       	ori	r24, 0x01	; 1
 114:	87 b9       	out	0x07, r24	; 7
	
	TCCR1B |= (0x0B);				// pre-scaler = 64, clear timer/counter e compare match
 116:	e1 e8       	ldi	r30, 0x81	; 129
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8b 60       	ori	r24, 0x0B	; 11
 11e:	80 83       	st	Z, r24
	OCR1A = 5;						// define top counter value
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 128:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (0x02);				// enable OC1 output to 'overflow interrupt'
 12c:	ef e6       	ldi	r30, 0x6F	; 111
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	82 60       	ori	r24, 0x02	; 2
 134:	80 83       	st	Z, r24
	
	int i = 0;
	
	sei();							// habilita interrupcao
 136:	78 94       	sei
	
	TCCR1B |= (0x0B);				// pre-scaler = 64, clear timer/counter e compare match
	OCR1A = 5;						// define top counter value
	TIMSK1 |= (0x02);				// enable OC1 output to 'overflow interrupt'
	
	int i = 0;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <main+0x38>
		if (i >= 8) {				// controle de LED
			i = 0;
		}
		
		if (i < 0) {				// controle de LED
			i = 8;
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	90 e0       	ldi	r25, 0x00	; 0
	int i = 0;
	
	sei();							// habilita interrupcao
	
	while (1) {
		if (led_status == 1) {
 142:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <led_status>
 146:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <led_status+0x1>
 14a:	21 30       	cpi	r18, 0x01	; 1
 14c:	31 05       	cpc	r19, r1
 14e:	e1 f4       	brne	.+56     	; 0x188 <main+0x7e>
			value = i;
 150:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <value+0x1>
 154:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <value>
			PORTB |= (1 << value);	// PORTB LED NL 1
 158:	45 b1       	in	r20, 0x05	; 5
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	08 2e       	mov	r0, r24
 160:	02 c0       	rjmp	.+4      	; 0x166 <main+0x5c>
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <main+0x58>
 16a:	24 2b       	or	r18, r20
 16c:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	2f e5       	ldi	r18, 0x5F	; 95
 170:	3a ee       	ldi	r19, 0xEA	; 234
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	21 50       	subi	r18, 0x01	; 1
 176:	30 40       	sbci	r19, 0x00	; 0
 178:	40 40       	sbci	r20, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x6a>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x74>
 17e:	00 00       	nop
			_delay_ms(300);			// delay 300 milliseconds
			led_status = 0;			// set LED Status to NL0
 180:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <led_status+0x1>
 184:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <led_status>
		}
		
		if (led_status == 0) {
 188:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <led_status>
 18c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <led_status+0x1>
 190:	23 2b       	or	r18, r19
 192:	b1 f4       	brne	.+44     	; 0x1c0 <main+0xb6>
			value = 8 - (8 - i);
 194:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <value+0x1>
 198:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <value>
			PORTB &= ~(1 << value);	// PORTB LED NL 0
 19c:	35 b1       	in	r19, 0x05	; 5
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	ab 01       	movw	r20, r22
 1a4:	08 2e       	mov	r0, r24
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <main+0xa2>
 1a8:	44 0f       	add	r20, r20
 1aa:	55 1f       	adc	r21, r21
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <main+0x9e>
 1b0:	24 2f       	mov	r18, r20
 1b2:	20 95       	com	r18
 1b4:	23 23       	and	r18, r19
 1b6:	25 b9       	out	0x05, r18	; 5
			led_status = 1;			// set LED Status to NL1
 1b8:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <led_status+0x1>
 1bc:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <led_status>
		}
		
		
		if (PINC & (1 << PINC1)) {
 1c0:	31 9b       	sbis	0x06, 1	; 6
 1c2:	09 c0       	rjmp	.+18     	; 0x1d6 <main+0xcc>
			direction = 1;
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 1cc:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
			PORTC &= ~(1 << PINC1);
 1d0:	28 b1       	in	r18, 0x08	; 8
 1d2:	2d 7f       	andi	r18, 0xFD	; 253
 1d4:	28 b9       	out	0x08, r18	; 8
		}
			
		
		if (PINC & (1 << PINC2)) {
 1d6:	32 9b       	sbis	0x06, 2	; 6
 1d8:	07 c0       	rjmp	.+14     	; 0x1e8 <main+0xde>
			direction = 0;
 1da:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 1de:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			PORTC &= ~(1 << PINC2);
 1e2:	28 b1       	in	r18, 0x08	; 8
 1e4:	2b 7f       	andi	r18, 0xFB	; 251
 1e6:	28 b9       	out	0x08, r18	; 8
			
		}
		

		if (direction == 0) {		// define a direcao do LED
 1e8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 1ec:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 1f0:	23 2b       	or	r18, r19
 1f2:	11 f4       	brne	.+4      	; 0x1f8 <main+0xee>
			i--;					// para esquerda
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <main+0xf0>
		} else {
			i++;					// para direita
 1f8:	01 96       	adiw	r24, 0x01	; 1
		}

		if (i >= 8) {				// controle de LED
 1fa:	88 30       	cpi	r24, 0x08	; 8
 1fc:	91 05       	cpc	r25, r1
 1fe:	14 f0       	brlt	.+4      	; 0x204 <main+0xfa>
			i = 0;
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		if (i < 0) {				// controle de LED
 204:	99 23       	and	r25, r25
 206:	0c f0       	brlt	.+2      	; 0x20a <main+0x100>
 208:	9c cf       	rjmp	.-200    	; 0x142 <main+0x38>
 20a:	99 cf       	rjmp	.-206    	; 0x13e <main+0x34>

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
