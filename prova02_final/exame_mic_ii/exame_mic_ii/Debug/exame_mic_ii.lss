
exame_mic_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000053e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080f  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006be  00000000  00000000  00000de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036b  00000000  00000000  000014a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001810  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000407  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000066  00000000  00000000  00001c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001cb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <led_on>:
#include <avr/interrupt.h>


// funcao para controlar qual led sera aceso
void led_on(int led) {
	PORTB |= (1<<led);
  80:	95 b1       	in	r25, 0x05	; 5
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <led_on+0xc>
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	8a 95       	dec	r24
  8e:	e2 f7       	brpl	.-8      	; 0x88 <led_on+0x8>
  90:	29 2b       	or	r18, r25
  92:	25 b9       	out	0x05, r18	; 5
  94:	08 95       	ret

00000096 <main>:
}


int main(void) {
	// registradores de controle de fluxo
	DDRB = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00;
  9a:	17 b8       	out	0x07, r1	; 7
	
	// selecionar o conversor analogo digital
	ADMUX |=(1<<REFS0);
  9c:	ec e7       	ldi	r30, 0x7C	; 124
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	80 83       	st	Z, r24
	// ativar conversor analogo digital
	ADCSRA |=(1<<ADEN)|(1<<ADATE)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 6a       	ori	r24, 0xA7	; 167
  ae:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f e7       	ldi	r18, 0x7F	; 127
  b2:	88 e3       	ldi	r24, 0x38	; 56
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x20>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x2a>
  c0:	00 00       	nop
	while(1) {
		// delay para conversao
		_delay_ms(100);
		
		// habilitar inicio de uma nova conversao
		ADCSRA |= (1<<ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
		
		// atribuindo a tensao a variavel
		voltage = (float)(5 * ADC) / 1023;
  cc:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d0:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  d4:	cb 01       	movw	r24, r22
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	68 0f       	add	r22, r24
  e0:	79 1f       	adc	r23, r25
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 bc 01 	call	0x378	; 0x378 <__floatunsisf>
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 ec       	ldi	r19, 0xC0	; 192
  ee:	4f e7       	ldi	r20, 0x7F	; 127
  f0:	54 e4       	ldi	r21, 0x44	; 68
  f2:	0e 94 4a 01 	call	0x294	; 0x294 <__divsf3>
  f6:	6b 01       	movw	r12, r22
  f8:	7c 01       	movw	r14, r24
		
		// verificacao da tensao entre 0 e 0.625
		if (voltage > 0 && voltage <= 0.625) {
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	a9 01       	movw	r20, r18
 100:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__gesf2>
 104:	18 16       	cp	r1, r24
 106:	7c f4       	brge	.+30     	; 0x126 <main+0x90>
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	40 e2       	ldi	r20, 0x20	; 32
 10e:	5f e3       	ldi	r21, 0x3F	; 63
 110:	c7 01       	movw	r24, r14
 112:	b6 01       	movw	r22, r12
 114:	0e 94 45 01 	call	0x28a	; 0x28a <__cmpsf2>
 118:	18 16       	cp	r1, r24
 11a:	2c f0       	brlt	.+10     	; 0x126 <main+0x90>
			// apagar o led
			PORTB = 0x00;
 11c:	15 b8       	out	0x05, r1	; 5
			// executar funcao para acender o led 1
			led_on(0);
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 40 00 	call	0x80	; 0x80 <led_on>
		}
		
		// verificacao da tensao entre 0.625 e 1.25
		if (voltage > 0.625 && voltage <= 1.25) {
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	40 e2       	ldi	r20, 0x20	; 32
 12c:	5f e3       	ldi	r21, 0x3F	; 63
 12e:	c7 01       	movw	r24, r14
 130:	b6 01       	movw	r22, r12
 132:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__gesf2>
 136:	18 16       	cp	r1, r24
 138:	7c f4       	brge	.+30     	; 0x158 <main+0xc2>
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	40 ea       	ldi	r20, 0xA0	; 160
 140:	5f e3       	ldi	r21, 0x3F	; 63
 142:	c7 01       	movw	r24, r14
 144:	b6 01       	movw	r22, r12
 146:	0e 94 45 01 	call	0x28a	; 0x28a <__cmpsf2>
 14a:	18 16       	cp	r1, r24
 14c:	2c f0       	brlt	.+10     	; 0x158 <main+0xc2>
			// apagar o led
			PORTB = 0x00;
 14e:	15 b8       	out	0x05, r1	; 5
			// executar funcao para acender o led 2
			led_on(1);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 40 00 	call	0x80	; 0x80 <led_on>
		}
		
		// verificacao da tensao entre 1.25 e 1.875
		if (voltage > 1.25 && voltage <= 1.875) {
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 ea       	ldi	r20, 0xA0	; 160
 15e:	5f e3       	ldi	r21, 0x3F	; 63
 160:	c7 01       	movw	r24, r14
 162:	b6 01       	movw	r22, r12
 164:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__gesf2>
 168:	18 16       	cp	r1, r24
 16a:	7c f4       	brge	.+30     	; 0x18a <main+0xf4>
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	40 ef       	ldi	r20, 0xF0	; 240
 172:	5f e3       	ldi	r21, 0x3F	; 63
 174:	c7 01       	movw	r24, r14
 176:	b6 01       	movw	r22, r12
 178:	0e 94 45 01 	call	0x28a	; 0x28a <__cmpsf2>
 17c:	18 16       	cp	r1, r24
 17e:	2c f0       	brlt	.+10     	; 0x18a <main+0xf4>
			// apagar o led
			PORTB = 0x00;
 180:	15 b8       	out	0x05, r1	; 5
			// executar funcao para acender o led 3
			led_on(2);
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 40 00 	call	0x80	; 0x80 <led_on>
		}
		
		// verificacao da tensao entre 1.875 e 2.5
		if (voltage > 1.875 && voltage <= 2.5) {
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	40 ef       	ldi	r20, 0xF0	; 240
 190:	5f e3       	ldi	r21, 0x3F	; 63
 192:	c7 01       	movw	r24, r14
 194:	b6 01       	movw	r22, r12
 196:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__gesf2>
 19a:	18 16       	cp	r1, r24
 19c:	7c f4       	brge	.+30     	; 0x1bc <main+0x126>
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 e2       	ldi	r20, 0x20	; 32
 1a4:	50 e4       	ldi	r21, 0x40	; 64
 1a6:	c7 01       	movw	r24, r14
 1a8:	b6 01       	movw	r22, r12
 1aa:	0e 94 45 01 	call	0x28a	; 0x28a <__cmpsf2>
 1ae:	18 16       	cp	r1, r24
 1b0:	2c f0       	brlt	.+10     	; 0x1bc <main+0x126>
			// apagar o led
			PORTB = 0x00;
 1b2:	15 b8       	out	0x05, r1	; 5
			// executar funcao para acender o led 4
			led_on(3);
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 40 00 	call	0x80	; 0x80 <led_on>
		}

		// verificacao da tensao entre 2.5 e 3.125
		if (voltage > 2.5 && voltage <= 3.125) {
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 e2       	ldi	r20, 0x20	; 32
 1c2:	50 e4       	ldi	r21, 0x40	; 64
 1c4:	c7 01       	movw	r24, r14
 1c6:	b6 01       	movw	r22, r12
 1c8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__gesf2>
 1cc:	18 16       	cp	r1, r24
 1ce:	7c f4       	brge	.+30     	; 0x1ee <main+0x158>
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	48 e4       	ldi	r20, 0x48	; 72
 1d6:	50 e4       	ldi	r21, 0x40	; 64
 1d8:	c7 01       	movw	r24, r14
 1da:	b6 01       	movw	r22, r12
 1dc:	0e 94 45 01 	call	0x28a	; 0x28a <__cmpsf2>
 1e0:	18 16       	cp	r1, r24
 1e2:	2c f0       	brlt	.+10     	; 0x1ee <main+0x158>
			// apagar o led
			PORTB = 0x00;
 1e4:	15 b8       	out	0x05, r1	; 5
			// executar funcao para acender o led 5
			led_on(4);
 1e6:	84 e0       	ldi	r24, 0x04	; 4
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 40 00 	call	0x80	; 0x80 <led_on>
		}

		// verificacao da tensao entre 3.125 e 3.75
		if (voltage > 3.125 && voltage <= 3.75) {
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	48 e4       	ldi	r20, 0x48	; 72
 1f4:	50 e4       	ldi	r21, 0x40	; 64
 1f6:	c7 01       	movw	r24, r14
 1f8:	b6 01       	movw	r22, r12
 1fa:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__gesf2>
 1fe:	18 16       	cp	r1, r24
 200:	7c f4       	brge	.+30     	; 0x220 <main+0x18a>
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	40 e7       	ldi	r20, 0x70	; 112
 208:	50 e4       	ldi	r21, 0x40	; 64
 20a:	c7 01       	movw	r24, r14
 20c:	b6 01       	movw	r22, r12
 20e:	0e 94 45 01 	call	0x28a	; 0x28a <__cmpsf2>
 212:	18 16       	cp	r1, r24
 214:	2c f0       	brlt	.+10     	; 0x220 <main+0x18a>
			// apagar o led
			PORTB = 0x00;
 216:	15 b8       	out	0x05, r1	; 5
			// executar funcao para acender o led 6
			led_on(5);
 218:	85 e0       	ldi	r24, 0x05	; 5
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 40 00 	call	0x80	; 0x80 <led_on>
		}
		
		// verificacao da tensao entre 3.75 e 4.375
		if (voltage > 3.75 && voltage <= 4.375) {
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	40 e7       	ldi	r20, 0x70	; 112
 226:	50 e4       	ldi	r21, 0x40	; 64
 228:	c7 01       	movw	r24, r14
 22a:	b6 01       	movw	r22, r12
 22c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__gesf2>
 230:	18 16       	cp	r1, r24
 232:	7c f4       	brge	.+30     	; 0x252 <main+0x1bc>
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	4c e8       	ldi	r20, 0x8C	; 140
 23a:	50 e4       	ldi	r21, 0x40	; 64
 23c:	c7 01       	movw	r24, r14
 23e:	b6 01       	movw	r22, r12
 240:	0e 94 45 01 	call	0x28a	; 0x28a <__cmpsf2>
 244:	18 16       	cp	r1, r24
 246:	2c f0       	brlt	.+10     	; 0x252 <main+0x1bc>
			// apagar o led
			PORTB = 0x00;
 248:	15 b8       	out	0x05, r1	; 5
			// executar funcao para acender o led 7
			led_on(6);
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 40 00 	call	0x80	; 0x80 <led_on>
		}
		
		// verificacao da tensao entre 4.375 e 5
		if (voltage >  4.375 && voltage <= 5) {
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	4c e8       	ldi	r20, 0x8C	; 140
 258:	50 e4       	ldi	r21, 0x40	; 64
 25a:	c7 01       	movw	r24, r14
 25c:	b6 01       	movw	r22, r12
 25e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__gesf2>
 262:	18 16       	cp	r1, r24
 264:	0c f0       	brlt	.+2      	; 0x268 <main+0x1d2>
 266:	24 cf       	rjmp	.-440    	; 0xb0 <main+0x1a>
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	40 ea       	ldi	r20, 0xA0	; 160
 26e:	50 e4       	ldi	r21, 0x40	; 64
 270:	c7 01       	movw	r24, r14
 272:	b6 01       	movw	r22, r12
 274:	0e 94 45 01 	call	0x28a	; 0x28a <__cmpsf2>
 278:	18 16       	cp	r1, r24
 27a:	0c f4       	brge	.+2      	; 0x27e <main+0x1e8>
 27c:	19 cf       	rjmp	.-462    	; 0xb0 <main+0x1a>
			// apagar o led
			PORTB = 0x00;
 27e:	15 b8       	out	0x05, r1	; 5
			// executar funcao para acender o led 8
			led_on(7);
 280:	87 e0       	ldi	r24, 0x07	; 7
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 40 00 	call	0x80	; 0x80 <led_on>
 288:	13 cf       	rjmp	.-474    	; 0xb0 <main+0x1a>

0000028a <__cmpsf2>:
 28a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__fp_cmp>
 28e:	08 f4       	brcc	.+2      	; 0x292 <__cmpsf2+0x8>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	08 95       	ret

00000294 <__divsf3>:
 294:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__divsf3x>
 298:	0c 94 34 02 	jmp	0x468	; 0x468 <__fp_round>
 29c:	0e 94 2d 02 	call	0x45a	; 0x45a <__fp_pscB>
 2a0:	58 f0       	brcs	.+22     	; 0x2b8 <__divsf3+0x24>
 2a2:	0e 94 26 02 	call	0x44c	; 0x44c <__fp_pscA>
 2a6:	40 f0       	brcs	.+16     	; 0x2b8 <__divsf3+0x24>
 2a8:	29 f4       	brne	.+10     	; 0x2b4 <__divsf3+0x20>
 2aa:	5f 3f       	cpi	r21, 0xFF	; 255
 2ac:	29 f0       	breq	.+10     	; 0x2b8 <__divsf3+0x24>
 2ae:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__fp_inf>
 2b2:	51 11       	cpse	r21, r1
 2b4:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__fp_szero>
 2b8:	0c 94 23 02 	jmp	0x446	; 0x446 <__fp_nan>

000002bc <__divsf3x>:
 2bc:	0e 94 45 02 	call	0x48a	; 0x48a <__fp_split3>
 2c0:	68 f3       	brcs	.-38     	; 0x29c <__divsf3+0x8>

000002c2 <__divsf3_pse>:
 2c2:	99 23       	and	r25, r25
 2c4:	b1 f3       	breq	.-20     	; 0x2b2 <__divsf3+0x1e>
 2c6:	55 23       	and	r21, r21
 2c8:	91 f3       	breq	.-28     	; 0x2ae <__divsf3+0x1a>
 2ca:	95 1b       	sub	r25, r21
 2cc:	55 0b       	sbc	r21, r21
 2ce:	bb 27       	eor	r27, r27
 2d0:	aa 27       	eor	r26, r26
 2d2:	62 17       	cp	r22, r18
 2d4:	73 07       	cpc	r23, r19
 2d6:	84 07       	cpc	r24, r20
 2d8:	38 f0       	brcs	.+14     	; 0x2e8 <__divsf3_pse+0x26>
 2da:	9f 5f       	subi	r25, 0xFF	; 255
 2dc:	5f 4f       	sbci	r21, 0xFF	; 255
 2de:	22 0f       	add	r18, r18
 2e0:	33 1f       	adc	r19, r19
 2e2:	44 1f       	adc	r20, r20
 2e4:	aa 1f       	adc	r26, r26
 2e6:	a9 f3       	breq	.-22     	; 0x2d2 <__divsf3_pse+0x10>
 2e8:	35 d0       	rcall	.+106    	; 0x354 <__divsf3_pse+0x92>
 2ea:	0e 2e       	mov	r0, r30
 2ec:	3a f0       	brmi	.+14     	; 0x2fc <__divsf3_pse+0x3a>
 2ee:	e0 e8       	ldi	r30, 0x80	; 128
 2f0:	32 d0       	rcall	.+100    	; 0x356 <__divsf3_pse+0x94>
 2f2:	91 50       	subi	r25, 0x01	; 1
 2f4:	50 40       	sbci	r21, 0x00	; 0
 2f6:	e6 95       	lsr	r30
 2f8:	00 1c       	adc	r0, r0
 2fa:	ca f7       	brpl	.-14     	; 0x2ee <__divsf3_pse+0x2c>
 2fc:	2b d0       	rcall	.+86     	; 0x354 <__divsf3_pse+0x92>
 2fe:	fe 2f       	mov	r31, r30
 300:	29 d0       	rcall	.+82     	; 0x354 <__divsf3_pse+0x92>
 302:	66 0f       	add	r22, r22
 304:	77 1f       	adc	r23, r23
 306:	88 1f       	adc	r24, r24
 308:	bb 1f       	adc	r27, r27
 30a:	26 17       	cp	r18, r22
 30c:	37 07       	cpc	r19, r23
 30e:	48 07       	cpc	r20, r24
 310:	ab 07       	cpc	r26, r27
 312:	b0 e8       	ldi	r27, 0x80	; 128
 314:	09 f0       	breq	.+2      	; 0x318 <__divsf3_pse+0x56>
 316:	bb 0b       	sbc	r27, r27
 318:	80 2d       	mov	r24, r0
 31a:	bf 01       	movw	r22, r30
 31c:	ff 27       	eor	r31, r31
 31e:	93 58       	subi	r25, 0x83	; 131
 320:	5f 4f       	sbci	r21, 0xFF	; 255
 322:	3a f0       	brmi	.+14     	; 0x332 <__divsf3_pse+0x70>
 324:	9e 3f       	cpi	r25, 0xFE	; 254
 326:	51 05       	cpc	r21, r1
 328:	78 f0       	brcs	.+30     	; 0x348 <__divsf3_pse+0x86>
 32a:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__fp_inf>
 32e:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__fp_szero>
 332:	5f 3f       	cpi	r21, 0xFF	; 255
 334:	e4 f3       	brlt	.-8      	; 0x32e <__divsf3_pse+0x6c>
 336:	98 3e       	cpi	r25, 0xE8	; 232
 338:	d4 f3       	brlt	.-12     	; 0x32e <__divsf3_pse+0x6c>
 33a:	86 95       	lsr	r24
 33c:	77 95       	ror	r23
 33e:	67 95       	ror	r22
 340:	b7 95       	ror	r27
 342:	f7 95       	ror	r31
 344:	9f 5f       	subi	r25, 0xFF	; 255
 346:	c9 f7       	brne	.-14     	; 0x33a <__divsf3_pse+0x78>
 348:	88 0f       	add	r24, r24
 34a:	91 1d       	adc	r25, r1
 34c:	96 95       	lsr	r25
 34e:	87 95       	ror	r24
 350:	97 f9       	bld	r25, 7
 352:	08 95       	ret
 354:	e1 e0       	ldi	r30, 0x01	; 1
 356:	66 0f       	add	r22, r22
 358:	77 1f       	adc	r23, r23
 35a:	88 1f       	adc	r24, r24
 35c:	bb 1f       	adc	r27, r27
 35e:	62 17       	cp	r22, r18
 360:	73 07       	cpc	r23, r19
 362:	84 07       	cpc	r24, r20
 364:	ba 07       	cpc	r27, r26
 366:	20 f0       	brcs	.+8      	; 0x370 <__divsf3_pse+0xae>
 368:	62 1b       	sub	r22, r18
 36a:	73 0b       	sbc	r23, r19
 36c:	84 0b       	sbc	r24, r20
 36e:	ba 0b       	sbc	r27, r26
 370:	ee 1f       	adc	r30, r30
 372:	88 f7       	brcc	.-30     	; 0x356 <__divsf3_pse+0x94>
 374:	e0 95       	com	r30
 376:	08 95       	ret

00000378 <__floatunsisf>:
 378:	e8 94       	clt
 37a:	09 c0       	rjmp	.+18     	; 0x38e <__floatsisf+0x12>

0000037c <__floatsisf>:
 37c:	97 fb       	bst	r25, 7
 37e:	3e f4       	brtc	.+14     	; 0x38e <__floatsisf+0x12>
 380:	90 95       	com	r25
 382:	80 95       	com	r24
 384:	70 95       	com	r23
 386:	61 95       	neg	r22
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	8f 4f       	sbci	r24, 0xFF	; 255
 38c:	9f 4f       	sbci	r25, 0xFF	; 255
 38e:	99 23       	and	r25, r25
 390:	a9 f0       	breq	.+42     	; 0x3bc <__floatsisf+0x40>
 392:	f9 2f       	mov	r31, r25
 394:	96 e9       	ldi	r25, 0x96	; 150
 396:	bb 27       	eor	r27, r27
 398:	93 95       	inc	r25
 39a:	f6 95       	lsr	r31
 39c:	87 95       	ror	r24
 39e:	77 95       	ror	r23
 3a0:	67 95       	ror	r22
 3a2:	b7 95       	ror	r27
 3a4:	f1 11       	cpse	r31, r1
 3a6:	f8 cf       	rjmp	.-16     	; 0x398 <__floatsisf+0x1c>
 3a8:	fa f4       	brpl	.+62     	; 0x3e8 <__floatsisf+0x6c>
 3aa:	bb 0f       	add	r27, r27
 3ac:	11 f4       	brne	.+4      	; 0x3b2 <__floatsisf+0x36>
 3ae:	60 ff       	sbrs	r22, 0
 3b0:	1b c0       	rjmp	.+54     	; 0x3e8 <__floatsisf+0x6c>
 3b2:	6f 5f       	subi	r22, 0xFF	; 255
 3b4:	7f 4f       	sbci	r23, 0xFF	; 255
 3b6:	8f 4f       	sbci	r24, 0xFF	; 255
 3b8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ba:	16 c0       	rjmp	.+44     	; 0x3e8 <__floatsisf+0x6c>
 3bc:	88 23       	and	r24, r24
 3be:	11 f0       	breq	.+4      	; 0x3c4 <__floatsisf+0x48>
 3c0:	96 e9       	ldi	r25, 0x96	; 150
 3c2:	11 c0       	rjmp	.+34     	; 0x3e6 <__floatsisf+0x6a>
 3c4:	77 23       	and	r23, r23
 3c6:	21 f0       	breq	.+8      	; 0x3d0 <__floatsisf+0x54>
 3c8:	9e e8       	ldi	r25, 0x8E	; 142
 3ca:	87 2f       	mov	r24, r23
 3cc:	76 2f       	mov	r23, r22
 3ce:	05 c0       	rjmp	.+10     	; 0x3da <__floatsisf+0x5e>
 3d0:	66 23       	and	r22, r22
 3d2:	71 f0       	breq	.+28     	; 0x3f0 <__floatsisf+0x74>
 3d4:	96 e8       	ldi	r25, 0x86	; 134
 3d6:	86 2f       	mov	r24, r22
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	2a f0       	brmi	.+10     	; 0x3e8 <__floatsisf+0x6c>
 3de:	9a 95       	dec	r25
 3e0:	66 0f       	add	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	88 1f       	adc	r24, r24
 3e6:	da f7       	brpl	.-10     	; 0x3de <__floatsisf+0x62>
 3e8:	88 0f       	add	r24, r24
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	97 f9       	bld	r25, 7
 3f0:	08 95       	ret

000003f2 <__fp_cmp>:
 3f2:	99 0f       	add	r25, r25
 3f4:	00 08       	sbc	r0, r0
 3f6:	55 0f       	add	r21, r21
 3f8:	aa 0b       	sbc	r26, r26
 3fa:	e0 e8       	ldi	r30, 0x80	; 128
 3fc:	fe ef       	ldi	r31, 0xFE	; 254
 3fe:	16 16       	cp	r1, r22
 400:	17 06       	cpc	r1, r23
 402:	e8 07       	cpc	r30, r24
 404:	f9 07       	cpc	r31, r25
 406:	c0 f0       	brcs	.+48     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 408:	12 16       	cp	r1, r18
 40a:	13 06       	cpc	r1, r19
 40c:	e4 07       	cpc	r30, r20
 40e:	f5 07       	cpc	r31, r21
 410:	98 f0       	brcs	.+38     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 412:	62 1b       	sub	r22, r18
 414:	73 0b       	sbc	r23, r19
 416:	84 0b       	sbc	r24, r20
 418:	95 0b       	sbc	r25, r21
 41a:	39 f4       	brne	.+14     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 41c:	0a 26       	eor	r0, r26
 41e:	61 f0       	breq	.+24     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 420:	23 2b       	or	r18, r19
 422:	24 2b       	or	r18, r20
 424:	25 2b       	or	r18, r21
 426:	21 f4       	brne	.+8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 428:	08 95       	ret
 42a:	0a 26       	eor	r0, r26
 42c:	09 f4       	brne	.+2      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42e:	a1 40       	sbci	r26, 0x01	; 1
 430:	a6 95       	lsr	r26
 432:	8f ef       	ldi	r24, 0xFF	; 255
 434:	81 1d       	adc	r24, r1
 436:	81 1d       	adc	r24, r1
 438:	08 95       	ret

0000043a <__fp_inf>:
 43a:	97 f9       	bld	r25, 7
 43c:	9f 67       	ori	r25, 0x7F	; 127
 43e:	80 e8       	ldi	r24, 0x80	; 128
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	08 95       	ret

00000446 <__fp_nan>:
 446:	9f ef       	ldi	r25, 0xFF	; 255
 448:	80 ec       	ldi	r24, 0xC0	; 192
 44a:	08 95       	ret

0000044c <__fp_pscA>:
 44c:	00 24       	eor	r0, r0
 44e:	0a 94       	dec	r0
 450:	16 16       	cp	r1, r22
 452:	17 06       	cpc	r1, r23
 454:	18 06       	cpc	r1, r24
 456:	09 06       	cpc	r0, r25
 458:	08 95       	ret

0000045a <__fp_pscB>:
 45a:	00 24       	eor	r0, r0
 45c:	0a 94       	dec	r0
 45e:	12 16       	cp	r1, r18
 460:	13 06       	cpc	r1, r19
 462:	14 06       	cpc	r1, r20
 464:	05 06       	cpc	r0, r21
 466:	08 95       	ret

00000468 <__fp_round>:
 468:	09 2e       	mov	r0, r25
 46a:	03 94       	inc	r0
 46c:	00 0c       	add	r0, r0
 46e:	11 f4       	brne	.+4      	; 0x474 <__fp_round+0xc>
 470:	88 23       	and	r24, r24
 472:	52 f0       	brmi	.+20     	; 0x488 <__fp_round+0x20>
 474:	bb 0f       	add	r27, r27
 476:	40 f4       	brcc	.+16     	; 0x488 <__fp_round+0x20>
 478:	bf 2b       	or	r27, r31
 47a:	11 f4       	brne	.+4      	; 0x480 <__fp_round+0x18>
 47c:	60 ff       	sbrs	r22, 0
 47e:	04 c0       	rjmp	.+8      	; 0x488 <__fp_round+0x20>
 480:	6f 5f       	subi	r22, 0xFF	; 255
 482:	7f 4f       	sbci	r23, 0xFF	; 255
 484:	8f 4f       	sbci	r24, 0xFF	; 255
 486:	9f 4f       	sbci	r25, 0xFF	; 255
 488:	08 95       	ret

0000048a <__fp_split3>:
 48a:	57 fd       	sbrc	r21, 7
 48c:	90 58       	subi	r25, 0x80	; 128
 48e:	44 0f       	add	r20, r20
 490:	55 1f       	adc	r21, r21
 492:	59 f0       	breq	.+22     	; 0x4aa <__fp_splitA+0x10>
 494:	5f 3f       	cpi	r21, 0xFF	; 255
 496:	71 f0       	breq	.+28     	; 0x4b4 <__fp_splitA+0x1a>
 498:	47 95       	ror	r20

0000049a <__fp_splitA>:
 49a:	88 0f       	add	r24, r24
 49c:	97 fb       	bst	r25, 7
 49e:	99 1f       	adc	r25, r25
 4a0:	61 f0       	breq	.+24     	; 0x4ba <__fp_splitA+0x20>
 4a2:	9f 3f       	cpi	r25, 0xFF	; 255
 4a4:	79 f0       	breq	.+30     	; 0x4c4 <__fp_splitA+0x2a>
 4a6:	87 95       	ror	r24
 4a8:	08 95       	ret
 4aa:	12 16       	cp	r1, r18
 4ac:	13 06       	cpc	r1, r19
 4ae:	14 06       	cpc	r1, r20
 4b0:	55 1f       	adc	r21, r21
 4b2:	f2 cf       	rjmp	.-28     	; 0x498 <__fp_split3+0xe>
 4b4:	46 95       	lsr	r20
 4b6:	f1 df       	rcall	.-30     	; 0x49a <__fp_splitA>
 4b8:	08 c0       	rjmp	.+16     	; 0x4ca <__fp_splitA+0x30>
 4ba:	16 16       	cp	r1, r22
 4bc:	17 06       	cpc	r1, r23
 4be:	18 06       	cpc	r1, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	f1 cf       	rjmp	.-30     	; 0x4a6 <__fp_splitA+0xc>
 4c4:	86 95       	lsr	r24
 4c6:	71 05       	cpc	r23, r1
 4c8:	61 05       	cpc	r22, r1
 4ca:	08 94       	sec
 4cc:	08 95       	ret

000004ce <__fp_zero>:
 4ce:	e8 94       	clt

000004d0 <__fp_szero>:
 4d0:	bb 27       	eor	r27, r27
 4d2:	66 27       	eor	r22, r22
 4d4:	77 27       	eor	r23, r23
 4d6:	cb 01       	movw	r24, r22
 4d8:	97 f9       	bld	r25, 7
 4da:	08 95       	ret

000004dc <__gesf2>:
 4dc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__fp_cmp>
 4e0:	08 f4       	brcc	.+2      	; 0x4e4 <__gesf2+0x8>
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	08 95       	ret

000004e6 <_exit>:
 4e6:	f8 94       	cli

000004e8 <__stop_program>:
 4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <__stop_program>
